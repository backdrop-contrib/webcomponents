<?php

/**
 * Implements hook_schema().
 */
function webcomponents_schema() {

  $schema = array();
  // main webcomponents entity definitions
  $schema['webcomponents'] = array(
    'description' => 'The base table for the Webcomponents entity',
    'fields' => array(
      'wid' => array(
        'description' => 'Webcomponent internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'Webcomponent machine name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Webcomponent type, for example polymer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'file' => array(
        'description' => 'Webcomponent file location.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => 'Webcomponent title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Webcomponent description.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'properties' => array(
        'description' => 'Webcomponent serialized properties.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('wid'),
  );
  // a table for mapping over to other entities
  $schema['webcomponents_content'] = array(
    'description' => 'Bridge to other entities implementing webcomponents as content so they can store design settings.',
    'fields' => array(
      'wcid' => array(
        'description' => 'Webcomponent content internal id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'etid' => array(
        'description' => 'Entity id implementing the webcomponent',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'etvid' => array(
        'description' => 'Entity revision id',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'etype' => array(
        'description' => 'The entity type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'additional_properties' => array(
        'description' => 'Additional Webcomponent property settings serialized.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'etid' => array('etid'),
    ),
    'primary key' => array('wcid'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function webcomponents_update_last_removed() {
  return 7000;
}

/**
 * Implements hook_install().
 */
function webcomponents_install() {
 _webcomponents_rebuild(TRUE);
 backdrop_set_message(t('Default is to serve webcomponents over a CDN but if you want to use local copies of the assets or do your own build make sure you copy everything from CopyThisStuff in the webcomponents module directory into sites/all/libraries/webcomponents/ and read the README.md.'), 'status');
}