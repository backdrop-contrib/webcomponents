<?php
/**
 * @file Web components integration
 */

define('WEBCOMPONENTS_CLASS_IDENTIFIER', 'webcomponent-module-selector');

/**
 * Implements hook_preprocess_page().
 */
function webcomponents_preprocess_page(&$vars) {
  $components = webcomponents_load_all();
  $files = array();
  // ensure files w/ multiple elements are only
  // imported once
  foreach ($components as $component) {
    // if it matches multiple to same file
    // it doesn't matter since it'll still be available
    $files[$component->file] = $component;
  }
  // let developers modify which files are appended to the document
  // right before we do so
  backdrop_alter('webcomponent_attached_files', $files);
  // write the component file reference to the screen
  foreach ($files as $component) {
    _webcomponents_add_to_head($component);
  }
  // load webcomponentsjs polyfill library if it exists
  $libraries = libraries_get_libraries();
  if (isset($libraries['webcomponents']) && is_dir(BACKDROP_ROOT . '/' . $libraries['webcomponents'] . '/webcomponentsjs')) {
    $inline = "
<script type='text/javascript'>
window.onload = function() {
  if ('registerElement' in document
    && 'import' in document.createElement('link')
    && 'content' in document.createElement('template')) {
    // platform is good!
  }
  else {
    // polyfill the platform!
    var e = document.createElement('script');
    e.src = '" . base_path() . $libraries['webcomponents'] . "/webcomponentsjs/webcomponents-lite.min.js';
    document.head.appendChild(e);
  }
};
</script>";
    $element = array(
      '#type' => 'markup',
      '#markup' => $inline,
    );
    backdrop_add_html_head($element, 'webcomponents-lite');
  }
}

/**
 * Implements hook_entity_info().
 */
function webcomponents_entity_info() {
  $info = array();
  $info['webcomponent'] = array(
    'label' => t('Web component'),
    'base table' => 'webcomponents',
    'entity keys' => array(
      'id' => 'wid',
      'label' => 'title',
      'bundle' => 'type',
    ),
    'uri callback' => 'webcomponent_uri',
    'module' => 'webcomponents',
    'entity class' => 'WebcomponentEntity',
    'controller class' => 'WebcomponentEntityController',
    'fieldable' => FALSE,
    'bundle keys' => array(
      'bundle' => 'type',
    ),
  );
  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function webcomponents_autoload_info() {
  return array(
    'WebComponentEntity' => 'includes/webcomponents.entity.inc',
    'WebcomponentEntityController' => 'includes/webcomponents.entity.inc',
    'WebcomponentEntityControllerInterface' => 'includes/webcomponents.entity.inc',
  );
}

/**
 * URI callback for entity
 */
function webcomponent_uri($webcomponent) {
  return array(
    'path' => 'webcomponent/' . $webcomponent->machine_name,
  );
}

/**
 * Return output for rendering a component
 * @param  array $component fully loaded webcomponent entity.
 * @return string            rendered representation of the component
 */
function _webcomponents_render_component($component) {
  if (isset($component->properties)) {
    if (!is_array($component->properties)) {
      $component->properties = unserialize($component->properties);
    }
    _webcomponents_add_to_head($component);
    // support token replacement of properties passed in
    foreach ($component->properties as &$property) {
      $property = token_replace($property);
    }
    $vars = array(
      'tag' => $component->machine_name,
      'properties' => $component->properties,
    );
    // support compressing slots into the innerHTML tag
    if (isset($component->slots)) {
      // support single slot name
      if (is_string($component->slots)) {
        $vars['innerHTML'] = $component->slots;
      }
      // support for multiple slot names
      else if (is_array($component->slots)) {
        $vars['innerHTML'] = '';
        foreach ($component->slots as $name => $content) {
          $vars['innerHTML'] .= '<span slot="' . $name . '">' . $content . '</span>';
        }
      }
    }
    if (!isset($vars['properties']['class'])) {
      $vars['properties']['class'] = WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    else {
      $vars['properties']['class'] .= ' ' . WEBCOMPONENTS_CLASS_IDENTIFIER;
    }
    // allow other projects to add onto and modify the webcomponent before it renders
    // useful for tag wrapping for systems like HAX
    backdrop_alter('webcomponent_render', $vars, $component);
    $output = theme('webcomponent', $vars);
    return $output;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function webcomponents_theme() {
  // test all components on the file system against what's
  // in the database to ensure the data models haven't changed
  _webcomponents_rebuild();
  // hilariously minor template
  return array(
    'webcomponent' => array(
      'variables' => array(
        'tag' => '',
        'properties' => array(),
        'innerHTML' => '',
        'wrap_tag' => '',
        'wrap_tag_close' => '',
      ),
      'render element' => 'element',
      'template' => 'webcomponent',
      'path' => backdrop_get_path('module', 'webcomponents') . '/templates',
    ),
  );
}

/**
 * Implements hook_entity_update().
 */
function webcomponents_entity_update($entity, $type) {
  // perform check for everything that IS NOT a webcomponent since that's circular
  if ($type != 'webcomponent' && isset($entity->webcomponents_additional) && !empty($entity->webcomponents_additional)) {
    // load entity info so we can grab the generic id and revision keys
    $info = entity_get_info($type);
    // insert into this table based on the revision and all known webcomponent
    // additional field data that we've stored
    db_insert('webcomponents_content')
    ->fields(array(
      'etid' => $entity->{$info['entity keys']['id']},
      'etvid' => $entity->{$info['entity keys']['revision']},
      'etype' => $type,
      'additional_properties' => serialize($entity->webcomponents_additional),
    ))
    ->execute();
  }
}

/**
 * Implements hook_entity_load().
 */
function webcomponents_entity_load($entities, $type) {
  if ($type == 'webcomponent') {
    // unpack properties
    foreach ($entities as $entity) {
      $entity->properties = unserialize($entity->properties);
    }
  }
  // allow any other entity to utilize the built in webcomponent_content map
  else {
    // ensure table exists, goofy issue where this can happen during install
    if (db_table_exists('webcomponents_content')) {
      $info = entity_get_info($type);
      foreach ($entities as $entity) {
        $query = db_select('webcomponents_content', 'wc');
        // match entity type
        $query->condition('wc.etype', $type, '=');
        // snag this entity id
        $query->condition('wc.etid', $entity->{$info['entity keys']['id']}, '=');
        // snag this revision if it exists
        if ($info['entity keys']['revision']) {
          $query->condition('wc.etvid', $entity->{$info['entity keys']['revision']}, '=');
        }
        // return additional properties since this will have the mapping
        $query->fields('wc', array('additional_properties'));
        // execute
        $result = $query->execute();
        // Build up the array of data to add to the entity
        foreach ($result->fetchAll() as $row) {
          $entity->webcomponents_additional = unserialize($row->additional_properties);
        }
      }
    }
  }
}

/**
 * Load all webcomponents in the database.
 * @return array array of entities or empty.
 */
function webcomponents_load_all($force_rebuild = FALSE) {
  $entities = &backdrop_static(__FUNCTION__);
  // @ignore druplart_conditional_assignment
  if (!$entities) {
    if (!$force_rebuild && $cached = cache_get('webcomponents')) {
      $entities = $cached->data;
    }
    else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'webcomponent');
      $query->execute();
      $result = $query->execute();
      // flip the results if it found them
      if (isset($result['webcomponent'])) {
        $keys = array_keys($result['webcomponent']);
        $entities = entity_load('webcomponent', $keys);
      }
      else {
        $entities = array();
      }
      cache_set('webcomponents', $entities);
    }
  }
  return $entities;
}

/**
 * Helper function to return all components as an array of tag names.
 */
function _webcomponents_all_tags() {
  $tags = array();
  $components = webcomponents_load_all();
  foreach ($components as $component) {
    $tags[] = $component->machine_name;
  }
  return $tags;
}

/**
 * Rebuild webcomponents from the file system.
 */
function _webcomponents_rebuild($hide_messages = FALSE) {
  // force rebuild of components from static
  $processed = array();
  // load all possible web components
  $componentfiles = webcomponents_load_webcomponents_files();
  // build the registry of possible component types
  $registry = _webcomponents_build_registry();
  // loop through results found, tagged by format they are in
  foreach ($componentfiles as $format => $files) {
    // process each file based on user defined callback for
    // how we've been told to handle processing of this component type
    if (!empty($files)) {
      foreach ($files as $file) {
        if (isset($registry[$format])) {
          $processed[$file] = call_user_func($registry[$format]['process'], $file);
          // ensure there was actually a match of some kind in there
          // with support for multiple element definitions per file
          if (!empty($processed[$file]) && is_array($processed[$file])) {
            foreach ($processed[$file] as $component) {
              // try and load webcomponent by machine name
              if ($entity = webcomponent_load_by_name($component->machine_name)) {
                foreach ($component as $key => $value) {
                  // see if any aspects changed
                  if ($key != 'file' && isset($entity->{$key}) && $entity->{$key} != $value) {
                    if (!$hide_messages) {
                      backdrop_set_message(t('Web components have changed! Make sure that your attributes are correctly reflected in your site. @key changed on @machine from @old to @new', array('@key' => $key, '@old' => serialize($entity->{$key}), '@new' => serialize($value), '@machine' => $component->machine_name)), 'warning', TRUE);
                    }
                    $entity->{$key} = $value;
                  }
                }
                if (is_array($entity->properties)) {
                  $entity->properties = serialize($entity->properties);
                }
                $entity->save();
              }
              else {
                // try and create the entity instead
                if (!empty($component->properties)) {
                  $component->properties = serialize($component->properties);
                }
                // ensure the file wasn't empty
                if (isset($component->machine_name)) {
                  $entity = entity_create('webcomponent', (array)$component);
                  $entity->save();
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Add webcomponent to the header of the site so it can work.
 */
function _webcomponents_add_to_head($component) {
  // generate filename hash based on the size of the file
  // this is a quick and dirty way to do invalidation when it updates without local cache refreshes client side
  if (file_exists(BACKDROP_ROOT . '/' . $component->file)) {
    $hash = filesize(BACKDROP_ROOT . '/' . $component->file);
    $element = array(
      '#tag' => 'link', // The #tag is the html tag
      '#attributes' => array( // Set up an array of attributes inside the tag
        'href' => base_path() . $component->file . '?h' . $hash,
        'rel' => 'import',
      ),
    );
    backdrop_add_html_head($element, 'webcomponent-' . $component->machine_name);
  }
}

/**
 * Return all available web component types registered.
 * Basically just that they have a callback so we know how
 * to process and convert them from static into database driven.
 * @return array array of possible formats and callbacks
 */
function _webcomponents_build_registry() {
  $formats = module_invoke_all('register_component_format');
  backdrop_alter('register_component_format', $formats);
  return $formats;
}

/**
 * Assembles components available to Backdrop.
 * @return array files where components live
 */
function webcomponents_load_webcomponents_files() {
  $componentfiles = module_invoke_all('webcomponents');
  backdrop_alter('webcomponents', $components);
  return $componentfiles;
}

/**
 * Load webcomponent by name
 * @param  string $name machine name of a webcomponent
 * @return object       fully loaded entity
 */
function webcomponent_load_by_name($name) {
  $entity = FALSE;
  $query = new EntityFieldQuery();
  $result = $query
  ->entityCondition('entity_type', 'webcomponent')
  ->propertyCondition('machine_name', $name)
  ->execute();
  // flip the results if it found them
  if (isset($result['webcomponent'])) {
    $tmp = array_pop($result['webcomponent']);
    $entity = entity_load('webcomponent', $tmp->wid);
  }
  return $entity;
}

/**
 * Sniff out html files in a directory
 * @param  string $dir a directory to search for .html includes
 * @return array       an array of html files to look for web components in
 */
function _webcomponents_find_html_includes($dir, $ignore = array(), $find = '.html') {
  $files = array();
  // common things to ignore
  $ignore[] = '.';
  $ignore[] = '..';
  $ignore[] = 'index.html';
  if (is_dir($dir)) {
    // step into the polymer directory and find all html templates
    $di = new DirectoryIterator(BACKDROP_ROOT . '/' . $dir);
    foreach ($di as $fileinfo) {
      $fname = $fileinfo->getFilename();
      // check for our find value skipping ignored values
      if (strpos($fname, $find) && !in_array($fname, $ignore)) {
        $files[] = $dir . $fileinfo->getFilename();
      }
      elseif (is_dir($dir . $fname) && !in_array($fname, $ignore)) {
        $di2 = new DirectoryIterator($dir . $fname);
        foreach ($di2 as $fileinfo2) {
          $fname2 = $fileinfo2->getFilename();
          // check for our find value skipping ignored values
          if (strpos($fname2, $find) && !in_array($fname2, $ignore)) {
            $files[] = $dir . $fname . '/' . $fname2;
          }
          elseif (is_dir($dir . $fname . '/' . $fname2) && !in_array($fname2, $ignore)) {
            $di3 = new DirectoryIterator($dir . $fname . '/' . $fname2);
            foreach ($di3 as $fileinfo3) {
              $fname3 = $fileinfo3->getFilename();
              // check for our find value skipping ignored values
              if (strpos($fname3, $find) && !in_array($fname3, $ignore)) {
                $files[] = $dir . $fname . '/' . $fname2 . '/' . $fname3;
              }
            }
          }
        }
      }
    }
  }
  return $files;
}
