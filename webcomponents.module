<?php
/**
 * @file Web components integration
 */

define('WEBCOMPONENTS_CLASS_IDENTIFIER', 'webcomponent-module-selector');
include_once 'WebComponentsService.php';

/**
 * Implements hook_init().
 */
function webcomponents_init() {
  $preconnect = array(
    'https://fonts.googleapis.com',
    'https://cdnjs.cloudflare.com',
    'https://i.creativecommons.org',
    'https://licensebuttons.net'
  );
  $config = config('webcomponents.settings');
  $base = $config->get('webcomponents_project_location');
  if ($config->get('webcomponents_project_location') == 'sites/all/libraries/webcomponents/') {
    $base = base_path() . $config->get('webcomponents_project_location');
  }
  else if ($config->get('webcomponents_project_location') != base_path() . 'sites/all/libraries/webcomponents/') {
    $preconnect[] = $config->get('webcomponents_project_location');
  }
  $loader = array(
    "preconnect" => $preconnect,
    "preload" => array(
      $base . "build.js",
      $base . "wc-registry.json",
      $base . "build/es6/node_modules/web-animations-js/web-animations-next-lite.min.js",
    ),
    "modulepreload" => array(
      $base . "build/es6/node_modules/@lrnwebcomponents/wc-autoload/wc-autoload.js",
      $base . "build/es6/node_modules/@lrnwebcomponents/dynamic-import-registry/dynamic-import-registry.js"
    )
  );
  foreach ($loader as $rel => $data) {
    foreach ($data as $key => $src) {
      $tag = array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => $rel,
          'href' => $src,
        ),
      );
      if ($rel == "preload") {
        $tag['#attributes']['as'] = 'script';
        if ($src == $base . "wc-registry.json") {
          $tag['#attributes']['as'] = 'fetch';
          $tag['#attributes']['crossorigin'] = "anonymous";
        }
      }
      if ($rel == "modulepreload") {
        $tag2 = array(
          '#tag' => 'link',
          '#attributes' => array(
            'rel' => "preload",
            'href' => $src,
            'as' => "script",
            'crossorigin' => "anonymous"
          ),
        );
        backdrop_add_html_head($tag2, 'webcomponents-tag2-preload-' . $key);
      }
      backdrop_add_html_head($tag, 'webcomponents-tag-' . $rel . $key);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function webcomponents_preprocess_page(&$vars) {
  // load in backdrop specific behaviors to match our amazing build integration element
  backdrop_add_js(backdrop_get_path('module', 'webcomponents') . '/webcomponents-behaviors.js');
  $config = config('webcomponents.settings');
  // generate autoload list
  $location = $config->get('webcomponents_project_location');
  if ($location == 'other') {
    $location = $config->get('webcomponents_project_location_other');
  }
  if ($location == 'sites/all/libraries/webcomponents/') {
    $location = base_path() . 'sites/all/libraries/webcomponents/';
  }
  $buildLocation = $location;
  // support for build file to come local but assets via CDN
  if ($config->get('webcomponents_project_local_build_file')) {
    $buildLocation = base_path() . 'sites/all/libraries/webcomponents/';
  }
  $wc = new WebComponentsService();
  $markup = $wc->applyWebcomponents($buildLocation, $location);
  backdrop_alter('webcomponents_build_integration_markup', $markup);
  $element = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );
  $vars['page_bottom'] .= backdrop_render($element);
}

/**
 * Implements hook_menu().
 */
function webcomponents_menu() {
    $items['admin/config/content/webcomponents'] = array(
    'title' => 'Web components',
    'description' => 'Settings for basic customizations to web components.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('webcomponents_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Set CDN if you want
 */
function webcomponents_settings_form($form, $form_state) {
  if (!module_exists('hax')) {
    $config = config('webcomponents.settings');
    $form = array();
    $form['webcomponents_project_location'] = [
      '#type' => 'select',
      '#title' => t('Webcomponents Location'),
      '#default_value' => $config->get('webcomponents_project_location'),
      '#options' => array(
        'https://cdn.webcomponents.psu.edu/cdn/' => 'Penn State CDN',
        'https://cdn.waxam.io/' => 'Waxam CDN',
        base_path() . 'sites/all/libraries/webcomponents/' => 'Local libraries folder (sites/all/libraries/webcomponents/)',
        'other' => t('Other'),
      ),
      '#description' => t("Use this to point to CDNs or if you've installed your web components some place else. Start without a slash and end with a slash."),
    ];
    $form['webcomponents_project_location_other'] = [
      '#type' => 'textfield',
      '#title' => t('Other Location'),
      '#default_value' => $config->get('webcomponents_project_location_other'),
      '#maxlength' => 1000,
      '#description' => t("Only use this if you need to use a source other than the above supported options."),
    ];
    // Add a submit button
    $form['actions']['#type'] = 'actions';
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    );

    return $form;
  }
  else {
    backdrop_goto('admin/config/content/hax');
  }
}

/**
 * Submit handler for module_settings_form().
 */
function webcomponents_settings_form_submit($form, &$form_state) {
  $config = config('webcomponents.settings');
  $config->set('webcomponents_project_location', $form_state['values']['webcomponents_project_location']);
  $config->set('webcomponents_project_location_other', $form_state['values']['webcomponents_project_location_other']);
  $config->save();

  backdrop_set_message(t('The configuration options have been saved.'));
}